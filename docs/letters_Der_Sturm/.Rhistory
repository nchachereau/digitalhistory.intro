devtools::load_all()
getwd()
library(jsonlite)
armadillo <- rjson::fromJSON("https://catalog.archives.gov/api/v1/?q=armadillo")
armadillo <- fromJSON("https://catalog.archives.gov/api/v1/?q=armadillo")
#' and a vector of object ids.
#'
# Note these declaration are not relevant when code is not
# part of a package, hence you need to call library(jsonlite)
# in order to make this function work if you are not building
# a package.
#' @examples
#' search_met("umbrella")
#' @importFrom jsonlite formJSON
#' @export
search_met <- function(keyword){
# note how URLencode improves this function
# because spaces are common in searches
# but are not allowed in URLs
url <- sprintf("https://collectionapi.metmuseum.org/public/collection/v1/search?q=%s", URLencode(keyword))
fromJSON(url)
}
library(jsonlite)
cats <- fromJSON("https://smb.museum-digital.de/json/objects?&s=katze")
cats
armadillo <- fromJSON("https://catalog.archives.gov/api/v1/?q=armadillo")
library(XML)
x <- xmlTreeParse("../Documents/GitHub/digital_history_intro/docs/letters_Der_Sturm/Q.01.19140115.FMA.01.xml")
x <- xmlTreeParse("../Documents/GitHub/digital_history_intro/docs/letters_Der_Sturm/Q.01.19140115.FMA.01.xml", useInternalNodes = TRUE)
library(xml2)
doc <- read_xml("Q.01.19151106.FMA.01.xml")
doc <- read_xml("../Documents/GitHub/digital_history_intro/docs/letters_Der_Sturm/Q.01.19151106.FMA.01.xml")
doc <- read_xml("Documents/GitHub/digital_history_intro/docs/letters_Der_Sturm/Q.01.19151106.FMA.01.xml")
text <- xml_text(doc)
text
text <- str_remove_all(text, "<.*?>")
library(tei2r)
library(stringr)
text <- str_remove_all(text, "<.*?>")
text
# set working directory (folder with files to process)
# (the path might be different on your computer)
setwd("docs/letters_Der_Sturm/")
getwd()
# create list that contains names of all xml-files in folder
files = list.files(path = "Documents/GitHub/digital_history_intro/docs/letters_Der_Sturm", pattern="*.xml")
# create an empty list with length equal to the amount of files to process
parsed_files <- vector(mode = "list", length = length(files))
parsed_files
buildDocList(directory = "Documents/GitHub/digital_history_intro/docs/letters_Der_Sturm",
import = TRUE, normalize = TRUE)
warnings()
test <- buildDocList(directory = "Documents/GitHub/digital_history_intro/docs/letters_Der_Sturm",
import = TRUE, normalize = TRUE)
test
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(parseTEI(files[i], node = "placeName"))
}
parsed_files
# create an empty list with length equal to the amount of files to process
parsed_files <- vector(mode = "list", length = length(files))
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(parseTEI(files[i], node = "placeName"))
}
# create list that contains names of all xml-files in folder
files = list.files(path = "Documents/GitHub/digital_history_intro/docs/letters_Der_Sturm", pattern="*.xml")
# create an empty list with length equal to the amount of files to process
parsed_files <- vector(mode = "list", length = length(files))
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(parseTEI(files[i], node = "placeName"))
}
library(XML)
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(parseTEI(files[i], node = "placeName"))
}
files
parsed_files[[1]] <- paste(parseTEI(files[1], node = "placeName"))
parsed_files[[2]] <- paste(parseTEI(files[2], node = "placeName"))
parsed_files[[40]] <- paste(parseTEI(files[40], node = "placeName"))
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(parseTEI(files[i], node = "placeName"))
}
# set working directory (folder with files to process)
# (the path might be different on your computer)
setwd("docs/letters_Der_Sturm/")
# set working directory (folder with files to process)
# (the path might be different on your computer)
setwd("/Users/serina00/Documents/GitHub/digital_history_intro/docs/letters_Der_Sturm/")
# create list that contains names of all xml-files in folder
files = list.files(pattern="*.xml")
files
# create an empty list with length equal to the amount of files to process
parsed_files <- vector(mode = "list", length = length(files))
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(parseTEI(files[i], node = "placeName"))
}
parsed_files
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(parseTEI(files[i], node = "title"))
}
parsed_files
# create an empty list with length equal to the amount of files to process
parsed_files <- vector(mode = "list", length = length(files))
parsed_files
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(c(parseTEI(files[i], node = "title"), (parseTEI(files[i], node = "title"))))
}
parsed_files
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(c(parseTEI(files[i], node = "title"), (parseTEI(files[i], node = "idno"))))
}
parsed_files
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(c(parseTEI(files[i], node = "title"), (parseTEI(files[i], node = "idno type = "file""))))
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(c(parseTEI(files[i], node = "title"), (parseTEI(files[i], node = "idno type = 'file'"))))
}
# create a loop that does the following exactly n times, where "n" is the length of
# files to process; in the current example, this is "54", so for all files from
# file 1 to file 54, do:
for (i in 1:length(files)){
# create a list within every list entry (i.e. for every file)
# and fill it with the content of the node "placeName",
# using the function parseTEI() from package "tei2r":
parsed_files[[i]] <- paste(c(parseTEI(files[i], node = "title"), (parseTEI(files[i], node = "idno")),
parseTEI(files[i], node = "correspAction type=sent")))
}
doc <- xmlParse('<correspAction type = "sent"/><persName', asText = TRUE)
doc <- xmlParse('<correspAction type = "sent"/><persName>', asText = TRUE)
doc <- xmlParse('<correspAction type = "sent"/><persName>/', asText = TRUE)
doc <- xmlParse('<correspAction type = "sent"/><persName/>', asText = TRUE)
all <- xmlParse(files)
files
all <- xmlParse("Q.01.19140115.FMA.01.xml")
all
one <- xmlParse("Q.01.19140115.FMA.01.xml")
rootnode <- xmlRoot(one)
rootnode
nodes <- xmlSize(rootnode)
nodes
second_node <- rootnode[2]
second_node
attri <- rootnode[[4]][[3]]
attri
attri <- rootnode[[5]][[1]]
attri
attri <- rootnode[[2]][[8]]
attri
df <- xmlToDataFrame("Q.01.19140115.FMA.01.xml")
xml_structure("Q.01.19140115.FMA.01.xml")
xml_structure(ona)
xml_structure(one)
getwd()
julian <- read.csv("~/Desktop/julian/revelations.txt")
julian <- read.csv2("~/Desktop/julian/revelations.txt")
julian
start.v <- which(text.v == "REVELATIONS\n of DIVINE LOVE")
start.v
start.v <- which(julian == "REVELATIONS\n of DIVINE LOVE")
start.v
start.v <- which(julian == "REVELATIONS")
start.v
start.v <- which(julian == "START OF THIS PROJECT GUTENBERG EBOOK")
start.v
julian <- scan("https://www.gutenberg.org/files/52958/52958-8.txt", what="character", sep="\n")
start.v <- which(julian == "START OF THIS PROJECT GUTENBERG EBOOK")
start.v
