---
title: "Analyse"
lang: de
suppress-bibliography: true
editor: 
  markdown: 
    wrap: sentence
---

`Strg-F 2.0`

Wir arbeiten im Folgenden mit einem Teilkorpus der Quellenedition "Der Sturm", nämlich mit allen Briefen, die von [Franz Marc](https://sturm-edition.de/register/personen/P.0000003.html) verfasst wurden. Um die folgenden Schritte nachzuvollziehen, laden Sie sich den Ordner "letters_Der_Sturm" herunter. Sie können dazu entweder das vollständige [GitHub-Repository zu diesem Guide](https://github.com/wissen-ist-acht/digitalhistory.intro) als Zip-Datei herunterladen und entpacken, und im Ordner "docs" befindet sich der Ordner "letters_Der_Sturm".

![GitHub-Repositorium mit Quellcode, Download via "Code" und "Download ZIP".](images/screenshot_download_repo.png){fig-align="left"}

Sie können das Repositorium auch über die Kommandozeile klonen 
``` bash
(base) serina00@dg-19-mac-02 ~ % git clone https://github.com/wissen-ist-acht/digitalhistory.intro.git
```
oder als bequeme Variante diesen [Direktlink](https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/wissen-ist-acht/digitalhistory.intro/tree/main/docs/letters_Der_Sturm) nutzen.

Wenn Sie die Schnittstelle der Webseite ausprobieren wollen, kommen Sie mit wenigen Kommandos an die Dateien; das Vorgehen für Mac/Linux ist in der Fußnote erklärt.[^1]

[^1]: Mit dem ersten Kommando erstellen wir eine Datei "briefe_marc.xml" mit den Dateinamen aller Briefe, die von Franz Marc geschrieben wurden -- über das Register auf der Webseite wissen wir, dass er die Personen-ID P.0000003 hat; 
die URL zur Abfrage der Schnittstelle können wir der [Dokumentation](https://sturm-edition.de/ressourcen/schnittstellen.html) entnehmen:
```bash
curl https://sturm-edition.de/api/persons/P.0000003 --output briefe_marc.xml
````
Wenn Sie die Datei mit einem Editor öffnen, der XML-Dateien lesen kann, sehen Sie, dass neben den Dateinamen, die nach "target=" stehen, noch viel Beifang ist, den wir loswerden möchten:
```xml
<person xmlns="http://www.tei-c.org/ns/1.0" source="http://d-nb.info/gnd/11857745X" xml:id="P.0000003">
    <persName type="pref">Marc, Franz</persName>
    <persName type="fn">Franz Marc</persName>
    <linkGrp type="files">
        <ptr n="Bl.375" target="Q.01.19191212.JVH.01.xml"/>
        <ptr n="Bl.377" target="Q.01.19200114.JVH.01.xml"/>
        <ptr n="Bl.219" target="Q.01.19160128.FMA.01.xml"/>
        <ptr n="Bl.222" target="Q.01.19160205.FMA.01.xml"/>
        <ptr n="Bl.223" target="Q.01.19160302.FMA.01.xml"/>
        <ptr n="Bl.218" target="Q.01.19160101.FMA.01.xml"/>
        <ptr n="Bl.221" target="Q.01.19160122.FMA.01.xml"/>
        <ptr n="Bl.220" target="Q.01.19160115.FMA.01.xml"/>
        <ptr n="Bl.207" target="Q.01.19150703.FMA.01.xml"/>
        ...
```

Denn eigentlich brauchen wir nur die Dateinamen, um die Dateien mit einem entsprechenden Befehl herunterladen zu können.
Mit dem zweiten Kommando erstellen wir eine deswegen eine neue Datei, in der die einzelnen extrahierten Dateinamen mit dem Download-Kommando `curl` kombiniert und um die entsprechende URL zum Download ergänzt werden:
``` bash
cat briefe_marc.xml | grep -o 'Q.*xml\b' | perl -nle 'print "curl -o $_ https://sturm-edition.de/api/files/$_ "' > dateinamen_briefe_marc.txt
```
Die Datei "dateinamen_briefe_marc.txt" sieht so aus:
```bash
curl -o Q.01.19191212.JVH.01.xml https://sturm-edition.de/api/files/Q.01.19191212.JVH.01.xml 
curl -o Q.01.19200114.JVH.01.xml https://sturm-edition.de/api/files/Q.01.19200114.JVH.01.xml 
curl -o Q.01.19160128.FMA.01.xml https://sturm-edition.de/api/files/Q.01.19160128.FMA.01.xml 
curl -o Q.01.19160205.FMA.01.xml https://sturm-edition.de/api/files/Q.01.19160205.FMA.01.xml 
curl -o Q.01.19160302.FMA.01.xml https://sturm-edition.de/api/files/Q.01.19160302.FMA.01.xml 
curl -o Q.01.19160101.FMA.01.xml https://sturm-edition.de/api/files/Q.01.19160101.FMA.01.xml 
curl -o Q.01.19160122.FMA.01.xml https://sturm-edition.de/api/files/Q.01.19160122.FMA.01.xml 
curl -o Q.01.19160115.FMA.01.xml https://sturm-edition.de/api/files/Q.01.19160115.FMA.01.xml 
curl -o Q.01.19150703.FMA.01.xml https://sturm-edition.de/api/files/Q.01.19150703.FMA.01.xml 
curl -o Q.01.19150417.FMA.01.xml https://sturm-edition.de/api/files/Q.01.19150417.FMA.01.xml 
curl -o Q.01.19151106.FMA.01.xml https://sturm-edition.de/api/files/Q.01.19151106.FMA.01.xml 
curl -o Q.01.19150918.FMA.01.xml https://sturm-edition.de/api/files/Q.01.19150918.FMA.01.xml
...
```

`cat briefe_marc.xml` gibt den Inhalt der Datei ins Terminal; 
`grep -o 'Q.*xml\b'` findet in diesem Inhalt alle Zeichenketten zwischen "Q" und "xml", wobei nach "xml" durch das Hinzufügen von "\b" das Zeichenende angezeigt ist;
die 54 gefundenen Zeichenketten werden in je eine neue Zeile geschrieben, wobei mit `curl -o $_` der Befehl "curl -o" und mit `$_` als Platzhalter die Zeichenkette (also der Dateiname) geschrieben wird, gefolgt von  "https://sturm-edition.de/api/files/$_" und mit `$_` wieder die Zeichenkette (also wieder der Dateiname).
Mit einem dritten Kommando, `bash`, führen wir die erstellte Datei aus, d.h. die in ihr stehenden Kommandos werden ausgeführt -- also via `curl` (**C**lient **URL**) die Briefe heruntergeladen.
```bash
bash dateinamen_briefe_marc.txt
```

Egal, wie Sie die Dateien heruntergeladen haben, sollten Sie 54 Briefe im xml-Format vorfinden.
Öffnen Sie dann das Terminal (Mac/Linux) bzw. die PowerShell (Windows) und bewegen sich mit `cd`, also `change directory`, in den Ordner (directory), in dem Ihre Textdateien liegen.\
In meinem Fall ist das unter Documents -- GitHub -- digital_history_intro/docs/letters_Der_Sturm.

``` bash
(base) serina00@dg-19-mac-02 ~ % cd Documents/GitHub/digital_history_intro/docs/letters_Der_Sturm`
```

Bei den meisten von Ihnen ist das vermutlich unter "Downloads" -- probieren Sie es aus.

(Um zu prüfen, was in einem Ordner liegt, können Sie im Terminal `ls` (für `list`) eingeben, bzw. in der PowerShell `dir` (für `directory`):

``` bash
(base) serina00@dg-19-mac-02 letters_Der_Sturm % ls
```
``` bash
Q.01.19140115.FMA.01.xml	Q.01.19150315.FMA.02.xml
Q.01.19140119.FMA.01.xml	Q.01.19150327.FMA.01.xml
Q.01.19140121.FMA.01.xml	Q.01.19150417.FMA.01.xml
Q.01.19140124.FMA.01.xml	Q.01.19150501.FMA.01.xml
Q.01.19140125.FMA.01.xml	Q.01.19150615.FMA.01.xml
Q.01.19140125.FMA.02.xml	Q.01.19150703.FMA.01.xml
Q.01.19140409.FMA.01.xml	Q.01.19150710.FMA.01.xml
Q.01.19140414.FMA.01.xml	Q.01.19150818.JVH.01.xml
Q.01.19140421.FMA.01.xml	Q.01.19150827.FMA.01.xml
Q.01.19140507.FMA.01.xml	Q.01.19150906.FMA.01.xml
Q.01.19140512.FMA.01.xml	Q.01.19150911.FMA.01.xml
...
```

### Erste Analysen 

Wenn Sie in den Ordner navigiert sind, in dem die Briefdateien liegen, können Sie mit einem einzeiligen Kommando die Suchvorgänge, die Sie nacheinander mit `Strg-F` mit jeder einzelnen Datei in einem Texteditor ausführen würden, mit dem Programm `grep` (Global Regular Expression Print) für alle Briefe in diesem Ordner vornehmen, indem Sie alle Dateien, die auf ".xml" enden, in die Suche aufnehmen.  Die Ergebnisse -- bei dieser Suche ein Brief -- können Sie sich im Terminal anschauen:

``` bash
(base) serina00@dg-19-mac-02 letters_Der_Sturm % grep -E '(Mit herzlichem Gruß|Mit herzlichen Grüßen)' *.xml 
```

``` bash
Q.01.19160115.FMA.01.xml:               <salute>Mit herzlichen Grüßen für Sie beide</salute> <signed>Ihr <persName key="P.0000003" ref="http://d-nb.info/gnd/11857745X">F.Marc</persName>
```
Die Formulierung "Mit herzlichen Grüßen" kommt also im Dokument Q.01.19160115.FMA.01.xml vor.

Sie können auch mit `wc -l` den **W**ord**c**ount, die Anzahl der gefundenen Treffer auf Zeilenebene, `-l` zählen und mit `>` in eine neue Datei schreiben (die während der Ausführung des Kommandos erstellt wird):

``` bash
(base) serina00@dg-19-mac-02 letters_Der_Sturm % grep -E '(Mit herzlichem Gruß|Mit herzlichen Grüßen)' *.xml | wc -l > count_greetings.txt
```

Wenn Sie die neue Datei count_greetings.txt öffnen, sollte sie "1" enthalten. 

Das Kommando `grep` hat im obigen Befehl den Zusatzparamter `E` bekommen, d.h. die Begriffe, nach denen gesucht werden soll, sind **E**xtended Regular Expressions -- wir suchen als nicht eine exakte Zeichenkette, sondern Nutzen Möglichkeiten zur Mustersuche.
Wir haben in unserer Suchabfrage nicht nur nach "Mit herzlichem Gruß" gesucht, sondern auch nach "Mit herzlichen Grüßen", formuliert mithilfe des Zeichens "|", hier als "oder" zu lesen.
Mithilfe Regular Expressions können wir unsere Suche weiter ausbauen und nach verschiedenen Varianten/Schreibweisen auf einmal suchen:

``` bash
(base) serina00@dg-19-mac-02 letters_Der_Sturm % grep -E '(Mit herzlichem Gru(ß|ss)|Mit herzlichen Grü(ß|ss)en|H(e|?*)rzl. Gru(ß|ss))' *.xml | wc -l
```

So formuliert finden wir 13 Treffer für eine Grußformel, mit den möglichen Schreibweisen "Mit herzlichem Gruß", "Mit herzlichem Gruss", "Mit herzlichen Grüßen", "Mit herzlichen Grüssen", "Herzl. Gruß", "Herzl. Gruss", "Hrzl. Gruß", "Hrzl. Gruss".

Wenn wir herausfinden möchten, ob Grüße mal *herzlich*, mal *hrzl.* oder *freundlich* verschickt wurden, können wir die Suche und die Art der Ausgabe modifizieren:

``` bash
(base) serina00@dg-19-mac-02 letters_Der_Sturm % grep -E 'Gr(u|ü)(ß|ss)' *.xml
```

``` bash
Q.01.19140115.FMA.01.xml:                    stets sofort antworte; es muß verloren gegangen sein. Grüßen Sie bitte D<hi rend="super">
Q.01.19140119.FMA.01.xml:                    <salute>Hrzl. Gruß</salute> <signed>Ihr <persName key="P.0000003" ref="http://d-nb.info/gnd/11857745X">F. Marc</persName>
Q.01.19140125.FMA.02.xml:                    <salute>Hrzl. Gruß</salute>
Q.01.19140421.FMA.01.xml:                        <closer>Gute Besserung <persName key="P.0000002" ref="http://d-nb.info/gnd/118891456">Ihrer Frau</persName> u. <salute>viel Grüße von mir</salute> <signed>Ihr <persName key="P.0000003" ref="http://d-nb.info/gnd/11857745X">Fz Marc</persName>
Q.01.19140507.FMA.01.xml:                    <salute>besten Gruß</salute>
Q.01.19140730.JVH.01.xml:            herzlichsten Grüssen für Sie beiden</salute> <signed>Ihre <persName key="P.0000004" ref="http://d-nb.info/gnd/11854764X">Jacoba van<hi rend="underline">Heemskerck</hi>
Q.01.19140831.FMA.01.xml:                    <salute>Hrzl. Gruß von Eurem Freund in Waffen</salute> <signed>
Q.01.19140908.JVH.01.xml:                    <salute>Viele herzlichsten Grussen für Sie beiden</salute> auch von Frl
Q.01.19141113.FMA.01.xml:                    <salute>Hrzl. Gruß 1 x 2</salute> <signed>Ihr <persName key="P.0000003" ref="http://d-nb.info/gnd/11857745X">Fz. Marc</persName>
Q.01.19141129.JVH.01.xml:                    <salute>Viele herzliche Grüssen für Sie beiden</salute>
Q.01.19150112.FMA.01.xml:                    <salute>Hrzl. Gruß Ihnen beiden</salute>
Q.01.19150116.FMA.01.xml:                    <salute>Mit herzl. Gruß Ihnen beiden</salute> <signed>Ihr <persName key="P.0000003" ref="http://d-nb.info/gnd/11857745X">FrM</persName>.</signed>
Q.01.19150121.FMA.01.xml:                    <salute>Herzl. Gruß</salute> <signed>Ihr <persName key="P.0000003" ref="http://d-nb.info/gnd/11857745X">Fz. Marc</persName>
Q.01.19150131.JVH.01.xml:                    <salute>Viele herzliche Grüssen für Sie beiden</salute>
...
```
Mit diesem Kommando durchsuchen wir also den Text nach dem Muster `Gr(u|ü)(ß|ss)`, also Beginn mit `Gr`, dann folgt entweder ein `u` oder ein `ü`, dann entweder ein `ß` oder `ss`. Weil wir kein Wortende markiert haben (das ginge mit `\b`), werden auch "Grüße" oder fiktive "Grussapparaturen" gefunden.

